// lib/auth.ts
import { db } from "@/db/drizzle";
import { account, session, subscription, user, verification } from "@/db/schema";
import {
  checkout,
  polar,
  portal,
  usage,
  webhooks,
} from "@polar-sh/better-auth";
import { Polar } from "@polar-sh/sdk";
import { betterAuth } from "better-auth";
import { drizzleAdapter } from "better-auth/adapters/drizzle";
import { nextCookies } from "better-auth/next-js";
// Environment configuration with types
interface EnvConfig {
  // Polar
  POLAR_ACCESS_TOKEN: string;
  POLAR_WEBHOOK_SECRET: string;
  NEXT_PUBLIC_APP_URL: string;
  NEXT_PUBLIC_STARTER_TIER: string;
  
  // Google OAuth
  GOOGLE_CLIENT_ID: string;
  GOOGLE_CLIENT_SECRET: string;
  
  // Environment
  NODE_ENV: 'development' | 'production' | 'test';
}

// Helper to safely access environment variables
function getEnvVar(key: string, defaultValue: string = ''): string {
  if (typeof process === 'undefined' || !process.env) {
    console.warn(`‚ö†Ô∏è process.env is not available, using default for ${key}`);
    return defaultValue;
  }
  return process.env[key] ?? defaultValue;
}

const env: EnvConfig = {
  // Polar
  POLAR_ACCESS_TOKEN: getEnvVar('POLAR_ACCESS_TOKEN', 'polar_oat_2X5xG3TbLnJ19GkLyID3ZxAR1XGbZzWGx9qCF3MR7lq'),
  POLAR_WEBHOOK_SECRET: getEnvVar('POLAR_WEBHOOK_SECRET', '457b088addfc4f6599d0f33f465c9274'),
  NEXT_PUBLIC_APP_URL: getEnvVar('NEXT_PUBLIC_APP_URL', 'http://localhost:3000'),
  NEXT_PUBLIC_STARTER_TIER: getEnvVar('NEXT_PUBLIC_STARTER_TIER', 'starter-tier'),
  
  // Google OAuth
  GOOGLE_CLIENT_ID: getEnvVar('GOOGLE_CLIENT_ID'),
  GOOGLE_CLIENT_SECRET: getEnvVar('GOOGLE_CLIENT_SECRET'),
  
  // Environment
  NODE_ENV: (getEnvVar('NODE_ENV') as 'development' | 'production' | 'test') || 'development'
};

// Utility function to safely parse dates
function safeParseDate(value: string | Date | null | undefined): Date | null {
  if (!value) return null;
  if (value instanceof Date) return value;
  return new Date(value);
}

// Polar integration is temporarily disabled
const ENABLE_POLAR_INTEGRATION = false;
let polarClient: Polar | null = null;

// Log the integration status
console.log(`üîå Polar integration is ${ENABLE_POLAR_INTEGRATION ? 'ENABLED' : 'DISABLED'}`);

/**
 * Initialize Polar client - no-op when integration is disabled
 */
const initializePolarClient = async (): Promise<null> => {
  if (!ENABLE_POLAR_INTEGRATION) {
    console.log('‚ÑπÔ∏è Polar integration is disabled. Set ENABLE_POLAR_INTEGRATION to true to enable.');
    return null;
  }
  
  // This code won't be reached when ENABLE_POLAR_INTEGRATION is false
  return null;
};

// Initialize if enabled
if (ENABLE_POLAR_INTEGRATION) {
  initializePolarClient()
    .then(client => {
      polarClient = client;
    })
    .catch(error => {
      console.error('‚ùå Error initializing Polar client:', error);
    });
}

// Create auth configuration
export const auth = betterAuth({
  trustedOrigins: [env.NEXT_PUBLIC_APP_URL],
  allowedDevOrigins: [env.NEXT_PUBLIC_APP_URL],
  cookieCache: {
    enabled: true,
    maxAge: 5 * 60, // Cache duration in seconds
  },
  database: drizzleAdapter(db, {
    provider: "pg",
    schema: {
      user,
      session,
      account,
      verification,
      subscription,
    },
  }),
  socialProviders: {
    google: {
      clientId: env.GOOGLE_CLIENT_ID,
      clientSecret: env.GOOGLE_CLIENT_SECRET,
    },
  },
  plugins: [
    // Polar plugin is temporarily disabled
    // To re-enable, set ENABLE_POLAR_INTEGRATION to true
    ...(ENABLE_POLAR_INTEGRATION && polarClient ? [
      polar({
        client: polarClient,
        createCustomerOnSignUp: false, // Disabled for now
        use: [
          checkout({
            products: [
              {
                productId: env.NEXT_PUBLIC_STARTER_TIER || 'starter-tier',
                slug: 'starter',
              },
            ],
            successUrl: `${env.NEXT_PUBLIC_APP_URL}/success`,
            authenticatedUsersOnly: true,
          }),
          portal(),
          usage(),
          webhooks({
            secret: env.POLAR_WEBHOOK_SECRET,
            onPayload: async (data: any) => {
              console.log('‚ÑπÔ∏è Polar webhook received but integration is disabled');
              // Webhook handling is disabled for now
              return { received: true };
            },
          })
        ]
      })
    ] : []),
    // Add other plugins here
    nextCookies()
  ],
});
