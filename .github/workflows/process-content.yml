name: Publish Content

on:
  workflow_dispatch:
    inputs:
      book_id:
        description: 'ID of the book to publish'
        required: true
        type: string
      user_id:
        description: 'ID of the user triggering the publish'
        required: true
        type: string
      session_id:
        description: 'Session ID for tracking the publish process'
        required: true
        type: string
      content_id:
        description: 'Content ID for this publish'
        required: true
        type: string
      include_metadata:
        description: 'Include metadata in EPUB'
        required: false
        type: boolean
        default: true
      include_cover:
        description: 'Include cover in EPUB'
        required: false
        type: boolean
        default: true
      include_toc:
        description: 'Include table of contents in EPUB'
        required: false
        type: boolean
        default: true
      include_imprint:
        description: 'Include imprint in EPUB'
        required: false
        type: boolean
        default: true
      toc_level:
        description: 'Table of contents depth level'
        required: false
        type: number
        default: 3
      metadata:
        description: 'Additional metadata as JSON string'
        required: false
        type: string
        default: '{}'

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      NODE_ENV: production
      NEXT_PUBLIC_APP_URL: https://bookshall.com

      # GitHub Token
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Inputs
      BOOK_ID: ${{ github.event.inputs.book_id }}
      USER_ID: ${{ github.event.inputs.user_id }}
      SESSION_ID: ${{ github.event.inputs.session_id }}
      CONTENT_ID: ${{ github.event.inputs.content_id }}
      INCLUDE_METADATA: ${{ github.event.inputs.include_metadata || 'true' }}
      INCLUDE_COVER: ${{ github.event.inputs.include_cover || 'true' }}
      INCLUDE_TOC: ${{ github.event.inputs.include_toc || 'true' }}
      INCLUDE_IMPRINT: ${{ github.event.inputs.include_imprint || 'true' }}
      TOC_LEVEL: ${{ github.event.inputs.toc_level || '3' }}
      METADATA: ${{ github.event.inputs.metadata }}

      # Cloudflare R2
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_URL: ${{ secrets.R2_PUBLIC_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug environment
        run: |
          echo "=== Env vars ==="
          env | sort
          echo "=== Inputs ==="
          echo "BOOK_ID=$BOOK_ID"
          echo "USER_ID=$USER_ID"
          echo "SESSION_ID=$SESSION_ID"
          echo "CONTENT_ID=$CONTENT_ID"
          echo "TOC_LEVEL=$TOC_LEVEL"
          echo "INCLUDE_METADATA=$INCLUDE_METADATA"
          echo "INCLUDE_COVER=$INCLUDE_COVER"
          echo "INCLUDE_TOC=$INCLUDE_TOC"
          echo "INCLUDE_IMPRINT=$INCLUDE_IMPRINT"
          echo "METADATA=$METADATA"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl unzip pandoc
          # Install AWS CLI v2 (for R2)
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws --version
          pandoc -v

      - name: Install project dependencies
        run: pnpm install --frozen-lockfile

      - name: Make scripts executable
        run: |
          chmod +x ./scripts/validate-inputs.sh
          chmod +x ./scripts/fetch-book.sh

      - name: Validate inputs
        run: ./scripts/validate-inputs.sh

      - name: Fetch book content
        run: ./scripts/fetch-book.sh

      - name: Generate EPUB
        run: |
          echo "üìö Generating EPUB..."
          mkdir -p output
          pandoc book.md \
            --toc --toc-depth=$TOC_LEVEL \
            --metadata-file=metadata.yaml \
            -o output/book.epub

      - name: Upload EPUB to R2
        run: |
          echo "‚òÅÔ∏è Uploading EPUB to Cloudflare R2..."
          aws s3 cp output/book.epub s3://$R2_BUCKET/$CONTENT_ID.epub \
            --endpoint-url=https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com

      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            *.log
            ./logs/
          retention-days: 7
