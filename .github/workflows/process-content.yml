name: Publish Epub

on:
  workflow_dispatch:
    inputs:
      book_id:
        description: 'Book ID'
        required: true
        type: string
      user_id:
        description: 'User ID'
        required: true
        type: string
      session_id:
        description: 'Session ID'
        required: true
        type: string
      content_id:
        description: 'Content ID'
        required: true
        type: string

permissions:
  contents: read
  actions: read

jobs:
  build-epub:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL || 'https://bookshall.com' }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y pandoc jq curl
          npm install -g pnpm
          pnpm install --no-frozen-lockfile

      - name: Set environment variables
        run: |
          export BOOK_ID="${{ inputs.book_id }}"
          export USER_ID="${{ inputs.user_id }}"
          export SESSION_ID="${{ inputs.session_id }}"
          export CONTENT_ID="${{ inputs.content_id }}"
          export COMBINED_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          mkdir -p ./work ./work/output ./work/payload ./work/chapters

      - name: Validate inputs and set environment
        shell: bash
        env:
          BOOK_ID: ${{ inputs.book_id }}
          USER_ID: ${{ inputs.user_id }}
          SESSION_ID: ${{ inputs.session_id }}
          CONTENT_ID: ${{ inputs.content_id }}
          TOC_LEVEL: ${{ inputs.toc_level || '3' }}
          INCLUDE_METADATA: ${{ inputs.include_metadata || 'true' }}
          INCLUDE_COVER: ${{ inputs.include_cover || 'true' }}
          INCLUDE_TOC: ${{ inputs.include_toc || 'true' }}
          INCLUDE_IMPRINT: ${{ inputs.include_imprint || 'true' }}
          METADATA: ${{ inputs.metadata || '{}' }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID || '' }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY || '' }}
        run: |
          set -euo pipefail

          # Required inputs from GitHub Actions
          : "${BOOK_ID:?book_id is required}"
          : "${USER_ID:?user_id is required}"
          : "${SESSION_ID:?session_id is required}"
          : "${CONTENT_ID:?content_id is required}"

          # Default TOC_LEVEL if missing or invalid
          TOC_LEVEL="${TOC_LEVEL:-3}"
          if [[ "$TOC_LEVEL" -lt 1 || "$TOC_LEVEL" -gt 6 ]]; then
            echo "::warning::toc_level must be between 1 and 6, defaulting to 3"
            TOC_LEVEL=3
          fi

          # Optional boolean inputs with defaults
          INCLUDE_METADATA="${INCLUDE_METADATA:-true}"
          INCLUDE_COVER="${INCLUDE_COVER:-true}"
          INCLUDE_TOC="${INCLUDE_TOC:-true}"
          INCLUDE_IMPRINT="${INCLUDE_IMPRINT:-true}"

          # Metadata JSON validation
          METADATA="${METADATA:-{}}"
          if ! echo "$METADATA" | jq -e . >/dev/null 2>&1; then
            echo "::warning::Invalid JSON in metadata, using empty object"
            METADATA="{}"
          else
            SLUG=$(echo "$METADATA" | jq -r '.slug // empty')
            if [ -n "$SLUG" ]; then
              echo "SLUG=$SLUG" >> $GITHUB_ENV
            fi
          fi

          # Export environment variables for next steps
          echo "INCLUDE_METADATA=$INCLUDE_METADATA" >> $GITHUB_ENV
          echo "INCLUDE_COVER=$INCLUDE_COVER" >> $GITHUB_ENV
          echo "INCLUDE_TOC=$INCLUDE_TOC" >> $GITHUB_ENV
          echo "TOC_LEVEL=$TOC_LEVEL" >> $GITHUB_ENV
          echo "INCLUDE_IMPRINT=$INCLUDE_IMPRINT" >> $GITHUB_ENV
          echo "METADATA='$METADATA'" >> $GITHUB_ENV

          # Mask sensitive values
          echo "::add-mask::${GITHUB_TOKEN}"
          [ -n "${R2_ACCESS_KEY_ID}" ] && echo "::add-mask::${R2_ACCESS_KEY_ID}"
          [ -n "${R2_SECRET_ACCESS_KEY}" ] && echo "::add-mask::${R2_SECRET_ACCESS_KEY}"

      - name: Fetch book & generate EPUB
        run: |
          chmod +x ./scripts/fetch-book.sh
          ./scripts/fetch-book.sh

      - name: Upload EPUB to R2
        env:
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_PUBLIC_URL: ${{ secrets.R2_PUBLIC_URL }}
        run: |
          FILE="./work/output/${CONTENT_ID}.epub"
          KEY="books/${CONTENT_ID}-$(date +%s).epub"
          curl -sSf -X PUT "${R2_ENDPOINT}/${R2_BUCKET}/$KEY" \
            -H "Authorization: Bearer ${R2_ACCESS_KEY_ID}:${R2_SECRET_ACCESS_KEY}" \
            -H "Content-Type: application/epub+zip" \
            --upload-file "$FILE"
          echo "EPUB_URL=${R2_PUBLIC_URL}/${R2_BUCKET}/$KEY" >> $GITHUB_OUTPUT
